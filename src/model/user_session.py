"""
User Session module
-----------------
Represents a user session with associated spreadsheet data
"""

import datetime
import os
from typing import Optional


class UserSession:
    """
    Represents a user's editing session
    """
    
    def __init__(self, session_id: str):
        """
        Initialize a user session

        Args:
            session_id: Unique session identifier
        """
        self.session_id = session_id
        self.spreadsheet = None
        self.modification_history = None
        self.generated_script = None
        self.created_at = datetime.datetime.now()
        self.last_accessed_at = self.created_at
    
    def get_spreadsheet(self):
        """
        Get the current spreadsheet

        Returns:
            The current spreadsheet object
        """
        return self.spreadsheet
    
    def update_spreadsheet(self, spreadsheet) -> None:
        """
        Update the session's spreadsheet

        Args:
            spreadsheet: New spreadsheet object
        """
        self.spreadsheet = spreadsheet
        self.update_last_access_time()
    
    def get_modification_history(self):
        """
        Get the modification history

        Returns:
            The modification history object
        """
        return self.modification_history
    
    def set_modification_history(self, history) -> None:
        """
        Set the modification history

        Args:
            history: New modification history object
        """
        self.modification_history = history
    
    def set_generated_script(self, script: str) -> None:
        """
        Set the LLM-generated script

        Args:
            script: The Python script generated by LLM
        """
        self.generated_script = script
        self.update_last_access_time()
    
    def get_generated_script(self) -> Optional[str]:
        """
        Get the LLM-generated script

        Returns:
            str: The generated script if available, None otherwise
        """
        return self.generated_script
    
    def is_expired(self, timeout_seconds: int) -> bool:
        """
        Check if this session has expired

        Args:
            timeout_seconds: Session timeout in seconds

        Returns:
            bool: True if the session has expired, False otherwise
        """
        time_elapsed = datetime.datetime.now() - self.last_accessed_at
        return time_elapsed.total_seconds() > timeout_seconds
    
    def update_last_access_time(self) -> None:
        """Update the last accessed time to now"""
        self.last_accessed_at = datetime.datetime.now()
